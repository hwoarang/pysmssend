#!/usr/bin/env python
# -*- coding: utf-8 -*-
#***************************************************************************
#*    Pysmssend ( Source Code ) MAIN PROGRAM
#***************************************************************************
# This file is part of Pysmssend Project
#
#    Pysmssend Project is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 3 of the License, or
#     (at your option) any later version.
#
#    Pysmssend is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
# -*- coding: utf-8 -*-

import sys,signal
import os,stat
import getopt
import re

#Define variables
homedir=os.environ["HOME"]
SHAREDIR="/usr/share/pysmssend/"
TEMPDIR="/.pysmssend/"
ACCOUNTS=homedir+TEMPDIR+"accounts/"
global account,verbose,username,password,text,debug,foobar,want_gpg,gpg_key
debug=False
version="1.49"

#Check for pyqt4 support
try:
	print "Importing PyQt4 modules...",
	from PyQt4 import QtCore, QtGui
	print "Done"
except ImportError :
	print "You need to have PyQT4 installed for gui support..."

################################## INIT ########################
def dotheconnections(GUI):
	"""Connect signals from various GUI components to pysmssend functions"""
	try:
		if verbose:
			print "Creating internal signal-slots connections...",
		QtCore.QObject.connect(GUI.ProvidersCombo,QtCore.SIGNAL("activated(const QString&)"),loadprovideraccount)
		QtCore.QObject.connect(GUI.AccountsCombo,QtCore.SIGNAL("activated(const QString&)"),loadstoredaccount)
		QtCore.QObject.connect(GUI.Save,QtCore.SIGNAL("clicked()"),storeaccount)
		QtCore.QObject.connect(GUI.Clear,QtCore.SIGNAL("clicked()"),clearform)
		QtCore.QObject.connect(GUI.ExitButton,QtCore.SIGNAL("clicked()"),closemod)
		QtCore.QObject.connect(GUI.Status_2,QtCore.SIGNAL("returnPressed()"), GUI.LoginButton.animateClick)
		QtCore.QObject.connect(GUI.CharacterLeft_2,QtCore.SIGNAL("returnPressed()"), GUI.MessageArea.setFocus)
		QtCore.QObject.connect(GUI.CharacterLeft_2,QtCore.SIGNAL("textChanged(const QString &)"),enablebutton)
		QtCore.QObject.connect(GUI.LoginButton,QtCore.SIGNAL("clicked()"),login)
     		QtCore.QObject.connect(GUI.SendButton,QtCore.SIGNAL("clicked()"),sendsms)
		QtCore.QObject.connect(GUI.MessageArea,QtCore.SIGNAL("textChanged()"),checklength)
		QtCore.QObject.connect(GUI.SelectAccount,QtCore.SIGNAL("clicked()"),insertaccount)
		QtCore.QObject.connect(GUI.DeleteAccount,QtCore.SIGNAL("clicked()"),deleteaccount)
		if verbose:
			print "Done"
	except:
		print ( "\n\nOh No :-(\n"
			"I failed to create signal-slot connections. Please file a\n"
			"bug at https://github.com/hwoarang/pysmssend/issues\n"
		)
		# We must exit now!
		sys.exit(3)

def dotrayconnections(tray):
	"""Connect signals from various tray components to pysmsmsend functions"""
	try:
		if verbose:
			print "Creating tray connections..."
		QtCore.QObject.connect(tray.trayic.Updater,QtCore.SIGNAL("triggered()"),checkforupdates)
		QtCore.QObject.connect(tray.trayic.Exit,QtCore.SIGNAL("triggered()"),closemod)
		QtCore.QObject.connect(tray.trayic.About,QtCore.SIGNAL("triggered()"),createabout)
		if verbose:
			print "Done"
	except:
		print ( "\n\nOh No :-(\n"
			"I failed to create signal-slot connections for systray. Please file a\n"
			"bug at https://github.com/hwoarang/pysmssend/issues\n"
		)
		# We must exit now!
		sys.exit(3)

def checkforupdates():
	if verbose:
		print "Checking for new version"
    	data1=urllib2.urlopen("http://pysmssend.silverarrow.org")
    	data2=data1.read()
    	data3=data2.find("Current Version")
    	data4=data2[data3:].split("<em>")[1].split("</em>")[0]
	if data4>version :
		if verbose:
			print "Found new version ("+data4+")"
		updater.setText("Sweet! New version is available! Go get it!")
	else:
		if verbose:
			print "You have the latest version installed"
		updater.setText("No updates are available at the moment")
	updater.show()

def loadprovideraccount():
	"""Load a previously saved account for the selected provider"""
	myloadprovideraccount(f,verbose,want_gpg,gpg_key)

def loadstoredaccount():
	"""Load the selected account"""
	myloadstoredaccount(f,verbose)

def checklength():
	"""Real-time message length display"""
	mychecklength(f)

def insertaccount():
	"""Insert selected account from the Account table"""
	myinsertaccount(f, want_gpg)

def deleteaccount():
	"""Delete an account from the Account table"""
	mydeleteaccount(f, verbose, want_gpg)

def storeaccount():
	"""Save a new account to the Account table"""
	mystoreaccount(f,want_gpg,gpg_key)

def clearform():
	"""Clear everything from the "New account" form"""
	f.ui.SaveAsText.clear()
	f.ui.UsernameText_2.clear()
	f.ui.PasswordText_2.clear()

def closemod():
	"""Exit"""
	# Too aggressive?
	sys.exit(0)

def enablebutton():
	"""Enable/Disable the 'Send' button"""
	number=f.ui.lineEdit3.text()
	numlen=len(number)
	if numlen>1:
		f.ui.Send.setEnabled(True)
	else:
		f.ui.Send.setEnabled(False)

def createabout():
	"""About Widget"""
	about.show()

def login():
	"""Login"""
	global foobar, account_loggedin, leftcred, username, password
	foobar,account_loggedin,leftcred,username,password=mylogin(f,tray,verbose,want_gpg,gpg_key)

def sendsms():
	"""Send a previously composed message"""
	mysmssend(foobar, f,tray,account_loggedin,verbose,leftcred,username,password)


verbose=False	#Set verbose option False
homedir=os.environ["HOME"]
debug=False
try:
	o, a = getopt.getopt(sys.argv[1:], 'a:u:p:n:hv',["help"])
except getopts.GetoptError as err:
		print str(err)
		usage()
		sys.exit(2)
opts = {}
for k,v in o:
	opts[k] = v
        if k == "-v":
                verbose=True
                debug=True
        elif k in ("-h", "--help"):
                from pysmssendmod.usage import *
                usage()
                sys.exit(0)

length=len(opts) #Get option number
if length>2: # gui can use -v
	if verbose:
		print "Command line mode enabled !"
	from pysmssendmod.cmdfunc import * #importing cmd modules
	ongui=False
else:#importing gui modules
	if verbose:
		print "Importing modules...",
	from designer.gui_wrapper import Sent, About, Updates
	from pysmssendmod.tray import *
 	from pysmssendmod.accountmanager import *
 	from pysmssendmod.account_io import *
	from pysmssendmod.input_validation import *
	from pysmssendmod.core_io import *
	from pysmssendmod.usage import *
	ongui=True
	if verbose:
		print "Done"
	if os.path.isdir(homedir+TEMPDIR):
		os.chmod(homedir+TEMPDIR, stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR)
	else:
		if verbose:
			print "Creating configuration folder..."
		os.mkdir(homedir+TEMPDIR)
		os.chmod(homedir+TEMPDIR, stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR)
		if verbose:
			print "Done"
	if os.path.isdir(homedir+TEMPDIR+"accounts/"):
		os.chmod(homedir+TEMPDIR+"accounts/", stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR)
	else:
		if verbose:
			print "Creating accounts folder..."
		os.mkdir(homedir+TEMPDIR+"accounts/")
		os.chmod(homedir+TEMPDIR+"accounts/", stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR)
		if verbose:
			print "Done"
	if not os.path.isfile(homedir+TEMPDIR+"config"):
		cfile = open(homedir+TEMPDIR+"config","w")
		cfile.write("# PYSMSSEND Configuration\n\n")
		cfile.write("# Set the following option to '1'\n")
		cfile.write("# if you want pysmssend to encrypt\n")
		cfile.write("# your accounts using your gpg key.\n")
		cfile.write("# Use 0 or no value to disable it\n")
		cfile.write("pysmssend_gpg_support=\n")
		cfile.write("# Set your key id\n")
		cfile.write("pysmssend_gpg_key=\n")
		cfile.close()
		want_gpg = False
	else:
		cfile = open(homedir+TEMPDIR+"config","r")
		if verbose:
			print "Reading "+homedir+TEMPDIR+"config"
		for line in cfile:
			line=line.rstrip()
			if not line.startswith("#"):
				config_opt=line.split("=")
				if config_opt[0] == "pysmssend_gpg_support":
					if config_opt[1] != 0 and config_opt[1]:
						if verbose:
							print "GPG support: enabled"
						want_gpg = True
					else:
						print "GPG support: disabled"
						want_gpg = False
				elif config_opt[0] == "pysmssend_gpg_key":
					if config_opt[1]:
						gpg_key = config_opt[1]
						if verbose:
							print "GPG key: "+gpg_key
					else:
						gpg_key = False
	if want_gpg and not gpg_key:
		print "You have enabled pysmssend_gpg_support"
		print "but you haven't specified a key id."
		print "Please fix your "+homedir+TEMPDIR+"config"
		sys.exit(1)
	if not want_gpg:
		decrypt_old(verbose)
	else:
		encrypt_old(verbose,gpg_key)

# Prepeare to launch UI
if ongui:
	if verbose:
		print "Creating the Qt4 interface..."
	app = QtGui.QApplication(sys.argv)
	about = About()
	about.setup_version(version)
	f = Sent()
	f.setup_version(version)
	dotheconnections(f.ui)
	f.show()
	updater=Updates()
	tray=trayicon()
	tray.start()
	dotrayconnections(tray)
	loadprovideraccount()
	if verbose:
		print "Launching application..."
	sys.exit(app.exec_())

# cmd mode
else:
	#run the cmd tool
	try:
		o, a = getopt.getopt(sys.argv[1:], 'a:u:p:n:hv',["help"])
		opts = {}
		for k,v in o:
			opts[k] = v
        		if k == "-v":
            			verbose = True
	        	if k in ("-h", "--help"):
        	    		usage()
        	    		sys.exit(0)
		if len(opts) < 4 and debug==False:
			usage()
			if len(a) < 1:
				sys.exit("No text specified.")
			else:
				sys.exit("Invalid number of parameters.")
		else:
			if len(a) < 1: usage(); sys.exit("No text specified.")
		account = str.lower(opts["-a"])
		username = opts["-u"]
		password = opts["-p"]
		phone = opts["-n"]
		text = a[0]
		leftcred=cmdlogin(account,username,password,verbose)
		sendsmscmd(account,username,password,phone,text,verbose,leftcred)
	except getopt.GetoptError, msg:
    			usage()
			sys.exit("Invalid Option(s) specified")


