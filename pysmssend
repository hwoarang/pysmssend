#!/usr/bin/env python
# -*- coding: utf-8 -*-
#***************************************************************************
#*    Pysmssend ( Source Code ) MAIN PROGRAM
#***************************************************************************
# This file is part of Pysmssend Project
#
#    Pysmssend Project is free software; you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published by
#     the Free Software Foundation; either version 3 of the License, or
#     (at your option) any later version.
#
#    Pysmssend is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#     GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#     along with this program.  If not, see <http://www.gnu.org/licenses/>.
# -*- coding: utf-8 -*-

import sys,signal 
import os,stat
import getopt
import re

#Define variables
homedir=os.environ["HOME"]
SHAREDIR="/usr/share/pysmssend/"
TEMPDIR="/.pysmssend/"
ACCOUNTS=homedir+TEMPDIR+"accounts/"
global account,verbose,username,password,text,debug,foobar,want_gpg,gpg_key
debug=False
version="1.48"

#Check for pyqt4 support
try:
  print "Importing PyQt4 modules...",
  from PyQt4 import QtCore, QtGui
  print "Done"
except ImportError :
  print "You need to have PyQT4 installed for gui support..."
if __name__=="__main__":

		global account,username,password,test,verbose,length,leftcred
		def dotheconnections(GUI):
			try:
				if verbose:
					print "Creating internal signal-slots connections...",
				QtCore.QObject.connect(GUI.comboBox,QtCore.SIGNAL("activated(const QString&)"),loadaccount)
				QtCore.QObject.connect(GUI.comboBox_2,QtCore.SIGNAL("activated(const QString&)"),loadstoredaccount)
				QtCore.QObject.connect(GUI.pushButton,QtCore.SIGNAL("clicked()"),storeaccount)
				QtCore.QObject.connect(GUI.pushButton_2,QtCore.SIGNAL("clicked()"),clearform)
	        		QtCore.QObject.connect(GUI.Exit,QtCore.SIGNAL("clicked()"),closemod)
				QtCore.QObject.connect(GUI.Insert,QtCore.SIGNAL("clicked()"),insert)
				QtCore.QObject.connect(GUI.lineEdit2,QtCore.SIGNAL("returnPressed()"),f.ui.Login.animateClick)
        			QtCore.QObject.connect(GUI.lineEdit3,QtCore.SIGNAL("returnPressed()"),f.ui.textEdit.setFocus)
				QtCore.QObject.connect(GUI.lineEdit3,QtCore.SIGNAL("textChanged(const QString &)"),enablebutton)
        			QtCore.QObject.connect(GUI.Login,QtCore.SIGNAL("clicked()"),login)
        			QtCore.QObject.connect(GUI.Send,QtCore.SIGNAL("clicked()"),sendsms)
        			QtCore.QObject.connect(GUI.textEdit,QtCore.SIGNAL("textChanged()"),checklength)
				QtCore.QObject.connect(GUI.actionAbout,QtCore.SIGNAL("activated()"),createabout)
				QtCore.QObject.connect(GUI.ins_acc,QtCore.SIGNAL("clicked()"),insertaccount)
				QtCore.QObject.connect(GUI.del_acc,QtCore.SIGNAL("clicked()"),deleteaccount)
				QtCore.QObject.connect(GUI.actionCheck_for_updates,QtCore.SIGNAL("activated()"),checkforupdates)
	                        QtCore.QObject.connect(tray.trayic.Updater,QtCore.SIGNAL("triggered()"),checkforupdates)
	                        QtCore.QObject.connect(tray.trayic.Exit,QtCore.SIGNAL("triggered()"),closemod)
	                        QtCore.QObject.connect(tray.trayic.About,QtCore.SIGNAL("triggered()"),createabout)
				if verbose:
					print "Done"

			except:
				print "Failed to create internal connections. Please send a bug report at hwoarang@silverarrow.org"
	    
	    	#Functions definitions

		def checkforupdates():
			if verbose:
				print "Checking for new version"
		    	data1=urllib2.urlopen("http://pysmssend.silverarrow.org")
		    	data2=data1.read()
		    	data3=data2.find("Current Version")
		    	data4=data2[data3:].split("<em>")[1].split("</em>")[0] 
			if data4>version :
				if verbose:
					print "Found new version ("+data4+")"
				updater1.show()
			else:
				if verbose:
					print "You have the latest version installed"
				updater2.show()			
		
		def loadaccount():
			global f,want_gpg,gpg_key
			myloadaccount(f,verbose,want_gpg,gpg_key)		
		def loadstoredaccount():
			global f
			myloadstoredaccount(f,verbose)
		def checklength():
			global f
			mychecklength(f)
		def insert():
			global f
			myinsert(f)
		def insertaccount():
			global f, want_gpg
			myinsertaccount(f, want_gpg)
		def deleteaccount():
			global f, verbose, want_gpg
			mydeleteaccount(f, verbose, want_gpg)
		def storeaccount():
	 		global f,want_gpg,gpg_key
			mystoreaccount(f,want_gpg,gpg_key)
		def clearform():
			f.ui.lineEdit_6.clear()
			f.ui.lineEdit_4.clear()
			f.ui.lineEdit_7.clear()
		def closemod():#close
			sys.exit(0)
		def writetofile(choice,user,password):
	 		mywritetofile(choice,user,password)
		def enablebutton():
			number=f.ui.lineEdit3.text()
			numlen=len(number)
			if numlen>1:
				f.ui.Send.setEnabled(True)
			else:
				f.ui.Send.setEnabled(False)
		def login():
			global account_loggedin,foobar,leftcred,username,password
			foobar,account_loggedin,leftcred,username,password=mylogin(f,tray,verbose,want_gpg,gpg_key)
		def createabout():
			about.show()
		def sendsms():	
			mysmssend(foobar, f,tray,account_loggedin,verbose,leftcred,username,password)
	


#EXECUTING MAIN PROGRAM
verbose=False	#Set verbose option False
homedir=os.environ["HOME"]
debug=False
o, a = getopt.getopt(sys.argv[1:], 'a:u:p:n:hv',["help"])
opts = {}
for k,v in o:
	opts[k] = v
        if k == "-v":
                verbose=True
                debug=True
        elif k in ("-h", "--help"):
                from pysmssendmod.usage import *
                usage()
                sys.exit(0)
length=len(opts) #Get option number
# display how many arguments we have
if length>2: #we are running the cmd mode ( I define 2 because gui can run with -v option"
	if verbose:
		print "Command line mode enabled !"
	from pysmssendmod.cmdfunc import *#importing cmd modules
	ongui=False
else:#importing gui modules
	if verbose:
		print "Importing modules...",
	from pysmssendmod.pysmssendgui import Ui_Sent, Testmain
	from pysmssendmod.about import Ui_About, About
	from pysmssendmod.tray import *
 	from pysmssendmod.accountmanager import *
	from pysmssendmod.updater import *
 	from pysmssendmod.account_io import *
	from pysmssendmod.input_validation import *
	from pysmssendmod.core_io import *
	from pysmssendmod.usage import *
	ongui=True
	if verbose:
		print "Done"
	if os.path.isdir(homedir+TEMPDIR):
		os.chmod(homedir+TEMPDIR, stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR)
	else:
		if verbose:
			print "Creating configuration folder..."
		os.mkdir(homedir+TEMPDIR)
		os.chmod(homedir+TEMPDIR, stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR)
		if verbose:
			print "Done"
	if os.path.isdir(homedir+TEMPDIR+"accounts/"):
		os.chmod(homedir+TEMPDIR+"accounts/", stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR)
	else:	
		if verbose:
			print "Creating accounts folder..."
		os.mkdir(homedir+TEMPDIR+"accounts/")
		os.chmod(homedir+TEMPDIR+"accounts/", stat.S_IRUSR|stat.S_IWUSR|stat.S_IXUSR)
		if verbose:
			print "Done"
	if not os.path.isfile(homedir+TEMPDIR+"config"):
		cfile = open(homedir+TEMPDIR+"config","w")
		cfile.write("# PYSMSSEND Configuration\n\n")
		cfile.write("# Set the following option to '1'\n")
		cfile.write("# if you want pysmssend to encrypt\n")
		cfile.write("# your accounts using your gpg key.\n")
		cfile.write("# Use 0 or no value to disable it\n")
		cfile.write("pysmssend_gpg_support=\n")
		cfile.write("# Set your key id\n")
		cfile.write("pysmssend_gpg_key=\n")
		cfile.close()
		want_gpg = False
	else:
		cfile = open(homedir+TEMPDIR+"config","r")
		if verbose:
			print "Reading "+homedir+TEMPDIR+"config"
		for line in cfile:
			line=line.rstrip()
			if not line.startswith("#"):
				config_opt=line.split("=")
				if config_opt[0] == "pysmssend_gpg_support":
					if config_opt[1] != 0 and config_opt[1]:
						if verbose:
							print "GPG support: enabled"
						want_gpg = True
					else:
						print "GPG support: disabled"
						want_gpg = False
				elif config_opt[0] == "pysmssend_gpg_key":
					if config_opt[1]:
						gpg_key = config_opt[1]
						if verbose:
							print "GPG key: "+gpg_key
					else:
						gpg_key = False
	if want_gpg and not gpg_key:
		print "You have enabled pysmssend_gpg_support"
		print "but you haven't specified a key id."
		print "Please fix your "+homedir+TEMPDIR+"config"
		sys.exit(1)
	if not want_gpg:
		decrypt_old(verbose)
	else:
		encrypt_old(verbose,gpg_key)
		
if ongui:
	if verbose:
		print "Creating the Qt4 interface..."
	app = QtGui.QApplication(sys.argv)#
	f = Testmain(verbose)
	f.show()
	about = About()
	updater1=Update()
	updater2=Update2()
	loadaccount()
	if verbose:
		print "Creating the tray icon...",
	tray=trayicon()
	tray.start()
	if verbose:
		print "Done"
	dotheconnections(f.ui)
	if verbose:
		print "Launching application..."
	sys.exit(app.exec_())
else:
	#run the cmd tool
	try:
		o, a = getopt.getopt(sys.argv[1:], 'a:u:p:n:hv',["help"])                            #read options
		opts = {}
		for k,v in o:                                                             
			opts[k] = v
        		if k == "-v":
            			verbose = True
	        	if k in ("-h", "--help"):
        	    		usage()
        	    		sys.exit(0)
		if len(opts) < 4 and debug==False:
			usage()
			if len(a) < 1: 
				sys.exit("No text specified.")
			else:
				sys.exit("Invalid number of parameters.")		
		else:
			if len(a) < 1: usage(); sys.exit("No text specified.")
		account = str.lower(opts["-a"])
		username = opts["-u"]
		password = opts["-p"]
		phone = opts["-n"]
		text = a[0]
		leftcred=cmdlogin(account,username,password,verbose)
		sendsmscmd(account,username,password,phone,text,verbose,leftcred)
	except getopt.GetoptError, msg:
    			usage()
			sys.exit("Invalid Option(s) specified")
	
        
